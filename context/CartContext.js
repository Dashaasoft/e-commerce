// import React, { createContext, useState, useContext } from 'react';

// const CartContext = createContext();

// export const useCart = () => useContext(CartContext);

// export const CartProvider = ({ children }) => {
//   const [cartItems, setCartItems] = useState([]);

//   const addToCart = (product, quantity, size) => {
//     setCartItems((prevItems) => {
//       const existingItem = prevItems.find((item) => item._id === product._id);
//       if (existingItem) {
//         return prevItems.map((item) =>
//           item._id === product._id
//             ? { ...item, quantity: item.quantity + quantity, size }
//             : item
//         );
//       }
//       return [...prevItems, { ...product, quantity, size }];
//     });
//   };

//   const removeFromCart = (productId) => {
//     setCartItems((prevItems) =>
//       prevItems.filter((item) => item._id !== productId)
//     );
//   };

//   const updateQuantity = (productId, quantity) => {
//     setCartItems((prevItems) =>
//       prevItems.map((item) =>
//         item._id === productId ? { ...item, quantity } : item
//       )
//     );
//   };

//   const calculateTotal = () => {
//     return cartItems.reduce(
//       (total, item) => total + item.price * item.quantity,
//       0
//     );
//   };

//   return (
//     <CartContext.Provider
//       value={{ cartItems, addToCart, removeFromCart, updateQuantity, calculateTotal }}
//     >
//       {children}
//     </CartContext.Provider>
//   );
// };

// import React, { createContext, useContext, useEffect, useState } from "react";
// import AsyncStorage from "@react-native-async-storage/async-storage";

// const CartContext = createContext();

// export const CartProvider = ({ children }) => {
//   const [cartItems, setCartItems] = useState([]);

//   // üõí –°–∞–≥—Å–Ω—ã –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö —Ñ—É–Ω–∫—Ü
//   const saveCartToStorage = async (items) => {
//     try {
//       await AsyncStorage.setItem("cart", JSON.stringify(items));
//     } catch (error) {
//       console.error("–°–∞–≥—Å —Ö–∞–¥–≥–∞–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
//     }
//   };

//   // üì§ –°–∞–≥—Å–Ω—ã ”©–≥”©–≥–¥–ª–∏–π–≥ `AsyncStorage`-–æ–æ—Å —É–Ω—à–∏—Ö
//   const loadCartFromStorage = async () => {
//     try {
//       const storedCart = await AsyncStorage.getItem("cart");
//       if (storedCart) {
//         setCartItems(JSON.parse(storedCart));
//       }
//     } catch (error) {
//       console.error("–°–∞–≥—Å–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
//     }
//   };

//   useEffect(() => {
//     loadCartFromStorage();
//   }, []);

//   // üÜï –°–∞–≥—Å–∞–Ω–¥ –Ω—ç–º—ç—Ö
//   const addToCart = (item) => {
//     const existingItem = cartItems.find((cartItem) => cartItem._id === item._id);
//     if (existingItem) {
//       // –•—ç—Ä—ç–≤ –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —Å–∞–≥—Å–∞–Ω–¥ –±–∞–π–≥–∞–∞ –±–æ–ª —Ç–æ–æ —à–∏—Ä—Ö—ç–≥–∏–π–≥ –Ω—ç–º—ç–≥–¥“Ø“Ø–ª–Ω—ç
//       const updatedCart = cartItems.map((cartItem) =>
//         cartItem._id === item._id
//           ? { ...cartItem, quantity: cartItem.quantity + 1 }
//           : cartItem
//       );
//       setCartItems(updatedCart);
//       saveCartToStorage(updatedCart);
//     } else {
//       // –®–∏–Ω—ç –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –Ω—ç–º—ç—Ö
//       const updatedCart = [...cartItems, { ...item, quantity: 1 }]; // –ê–Ω—Ö–Ω—ã quantity = 1
//       setCartItems(updatedCart);
//       saveCartToStorage(updatedCart);
//     }
//   };

//   // ‚ùå –°–∞–≥—Å–Ω–∞–∞—Å —Ö–∞—Å–∞—Ö
//   const removeFromCart = (id) => {
//     const updatedCart = cartItems.filter((item) => item._id !== id);
//     setCartItems(updatedCart);
//     saveCartToStorage(updatedCart);
//   };

//   // üî¢ –¢–æ–æ —à–∏—Ä—Ö—ç–≥ —à–∏–Ω—ç—á–ª—ç—Ö
//   const updateQuantity = (id, quantity) => {
//     const updatedCart = cartItems.map((item) =>
//       item._id === id ? { ...item, quantity } : item
//     );
//     setCartItems(updatedCart);
//     saveCartToStorage(updatedCart);
//   };

//   // üí∞ –ù–∏–π—Ç “Ø–Ω—ç —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
//   const calculateTotal = () => {
//     return cartItems.reduce((total, item) => {
//       const price = parseFloat(item.price) || 0; // price-–≥ —Ç–æ–æ –±–æ–ª–≥–æ–Ω —Ö—É–≤–∏—Ä–≥–∞—Ö
//       const quantity = parseInt(item.quantity) || 0; // quantity-–≥ —Ç–æ–æ –±–æ–ª–≥–æ–Ω —Ö—É–≤–∏—Ä–≥–∞—Ö
//       return total + price * quantity;
//     }, 0);
//   };

//   return (
//     <CartContext.Provider
//       value={{ cartItems, addToCart, removeFromCart, updateQuantity, calculateTotal }}
//     >
//       {children}
//     </CartContext.Provider>
//   );
// };

// export const useCart = () => useContext(CartContext);

import React, { createContext, useState, useContext, useEffect } from "react";
import AsyncStorage from "@react-native-async-storage/async-storage";

// –°–∞–≥—Å–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç “Ø“Ø—Å–≥—ç—Ö
const CartContext = createContext();

// –°–∞–≥—Å–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∏–π–≥ –∞—à–∏–≥–ª–∞—Ö —Ñ—É–Ω–∫—Ü
export const useCart = () => useContext(CartContext);

// –°–∞–≥—Å–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export const CartProvider = ({ children }) => {
  const [cartItems, setCartItems] = useState([]); // –°–∞–≥—Å–Ω—ã –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω“Ø“Ø–¥–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö —Ç”©–ª”©–≤

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞—á–∞–∞–ª–∞–≥–¥–∞—Ö “Ø–µ–¥ AsyncStorage-—ç—ç—Å —Å–∞–≥—Å–Ω—ã –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω“Ø“Ø–¥–∏–π–≥ –∞—á–∞–∞–ª–∞—Ö
  useEffect(() => {
    const loadCartItems = async () => {
      try {
        const savedCartItems = await AsyncStorage.getItem("cartItems");
        if (savedCartItems) {
          setCartItems(JSON.parse(savedCartItems)); // JSON string-–∏–π–≥ –æ–±—ä–µ–∫—Ç –±–æ–ª–≥–æ–Ω —Ö—É–≤–∏—Ä–≥–∞—Ö
        }
      } catch (error) {
        console.error(
          "AsyncStorage-—ç—ç—Å —Å–∞–≥—Å–Ω—ã –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –∞—á–∞–∞–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:",
          error
        );
      }
    };

    loadCartItems();
  }, []);

  // –°–∞–≥—Å–Ω—ã –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω ”©”©—Ä—á–ª”©–≥–¥”©—Ö “Ø–µ–¥ AsyncStorage-–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
  useEffect(() => {
    const saveCartItems = async () => {
      try {
        await AsyncStorage.setItem("cartItems", JSON.stringify(cartItems)); // –û–±—ä–µ–∫—Ç—ã–≥ JSON string –±–æ–ª–≥–æ–Ω —Ö–∞–¥–≥–∞–ª–∞—Ö
      } catch (error) {
        console.error(
          "AsyncStorage-–¥ —Å–∞–≥—Å–Ω—ã –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —Ö–∞–¥–≥–∞–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:",
          error
        );
      }
    };

    saveCartItems();
  }, [cartItems]);

  // –°–∞–≥—Å–∞–Ω–¥ –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –Ω—ç–º—ç—Ö —Ñ—É–Ω–∫—Ü
  const addToCart = (product, quantity, size, color) => {
    setCartItems((prevItems) => {
      const existingItem = prevItems.find(
        (item) => item._id === product._id && item.size === size && item.color === color
      );

      if (existingItem) {
        return prevItems.map((item) =>
          item._id === product._id && item.size === size && item.color === color
            ? { ...item, quantity: item.quantity + quantity }
            : item
        );
      }

      // üëá image.url —Ö”©—Ä–≤“Ø“Ø–ª–∂ ”©–≥”©—Ö
      const newItem = {
        ...product,
        quantity,
        size,
        color,
        image: {
          url:
            product.image?.url || // —Ö—ç—Ä–≤—ç—ç –±–∞–π–≥–∞–∞ –±–æ–ª
            product.images?.[0] || // –æ–ª–æ–Ω –∑—É—Ä–∞–≥—Ç–∞–π –±–æ–ª —ç—Ö–Ω–∏–π—Ö
            "https://via.placeholder.com/150", // fallback –∑—É—Ä–∞–≥
        },
      };

      return [...prevItems, newItem];
    });
  };

  // –°–∞–≥—Å–Ω–∞–∞—Å –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —Ö–∞—Å–∞—Ö —Ñ—É–Ω–∫—Ü
  const removeFromCart = (productId, size, color) => {
    setCartItems((prevItems) =>
      prevItems.filter(
        (item) => !(item._id === productId && item.size === size && item.color === color)
      )
    );
  };

  // –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π —Ç–æ–æ —à–∏—Ä—Ö—ç–≥–∏–π–≥ ”©”©—Ä—á–ª”©—Ö —Ñ—É–Ω–∫—Ü
  const updateQuantity = (productId, size, color, quantity) => {
    setCartItems((prevItems) =>
      prevItems.map((item) =>
        item._id === productId && item.size === size && item.color === color
          ? { ...item, quantity }
          : item
      )
    );
  };

  // –ù–∏–π—Ç “Ø–Ω–∏–π–≥ —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö —Ñ—É–Ω–∫—Ü
  const calculateTotal = () => {
    return cartItems.reduce(
      (total, item) => total + item.price * item.quantity,
      0
    );
  };

  // –°–∞–≥—Å—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö —Ñ—É–Ω–∫—Ü
  const clearCart = () => {
    setCartItems([]);
    AsyncStorage.removeItem("cartItems");
  };

  // –°–∞–≥—Å–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∏–π–≥ –±—É—Å–∞–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É—É–¥–∞–¥ –Ω–∏–π–ª“Ø“Ø–ª—ç—Ö
  return (
    <CartContext.Provider
      value={{
        cartItems,
        addToCart,
        removeFromCart,
        updateQuantity,
        calculateTotal,
        clearCart,
      }}
    >
      {children}
    </CartContext.Provider>
  );
};
